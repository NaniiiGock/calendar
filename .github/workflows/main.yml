
"""mas = [[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3]]
mas1 = []
for i in range(len(mas[0])):
    mas1.append([])
    for j in range(len(mas)):
        mas1[i].append(mas[j][i])
#print(mas1)"""
import calendar as cal


def module(number: str):
    """
    function returns module of number
    >>> module(11)
    11
    """
    mon = number.split(" ")
    if mon[0] == 0:
        number = int(mon[1])
        return number
    return int(number)


def weekday_name(number: int) -> str:
    """
    Return a string representing a weekday
    (one of "mon", "tue", "wed", "thu", "fri", "sat", "sun")
    number : an integer in range [0, 6]

    >>> weekday_name(3)
    'thu'
    """
    weekdays = ["mon", "tue", "wed", "thu", "fri", "sat", "sun"]
    weekday = weekdays[number - 1]
    return weekday


def weekday(date: str) -> int:
    """
    Return an integer representing a weekday
    (0 represents monday and so on)
    Read about algorithm as Zeller's Congruence
    date : a string of form "day.month.year
    if the date is invalid raises AssertionError
    with corresponding message

    >>> weekday("12.08.2015")
    2
    >>> weekday("28.02.2016")
    6
    """
    date = str(date).split(".")
    day = module(date[0])
    month = module(date[1])
    year = module(date[2])

    day = cal.weekday(year, month, day)
    return day

def calendar(month: int, year: int) -> str:
    """Return a string representing a\
    horizontal calendar for the given month and year.

    month : an integer in range [1 , 12]
    year : an integer (strictly speaking the algorithm in weekday
           works correctly only for Gregorian calendar, so year must
           be greater than 1583)
    when arguments are invalid raises AssertionError with corresponding
    message

    >>> print(calendar(8 , 2015))
    mon tue wed thu fri sat sun
                          1   2
      3   4   5   6   7   8   9
     10  11  12  13  14  15  16
     17  18  19  20  21  22  23
     24  25  26  27  28  29  30
     31
    """
    calendar1 = cal.TextCalendar().formatmonth(year, month, w=3)
    calendar1 = calendar1.split("\n")
    calendar1.pop(0)
    calendar1[0] = "mon tue wed thu fri sat sun"
    calendar1.pop()
    calendar1 = "\n".join(calendar1)
    return calendar1


def transform_calendar(calendar: str) -> str:
    """Return a modified horizontal -> vertical calendar.

    calendar is a string of a calendar, returned by the calendar()
    function.
    >>> print(transform_calendar(calendar(5, 2002)))
    mon   6 13 20 27
    tue   7 14 21 28
    wed 1 8 15 22 29
    thu 2 9 16 23 30
    fri 3 10 17 24 31
    sat 4 11 18 25
    sun 5 12 19 26
    >>> print(transform_calendar(calendar(8 , 2015)))
    mon   3 10 17 24 31
    tue   4 11 18 25
    wed   5 12 19 26
    thu   6 13 20 27
    fri   7 14 21 28
    sat 1 8 15 22 29
    sun 2 9 16 23 30
    """
    calendar2 = [[]] * 7
    print(calendar)
    calendar = calendar.split("\n")
    print(calendar)
    calendar2 = []
    calendar.pop()
    for i, _ in enumerate(calendar):
        j = 3
        temp_calendar = []
        temp_calendar.append(calendar[i][:3])
        for k in range(1, (len(calendar[i])-3)//4):
            temp_calendar.append(calendar[i][j + (k-1)*4:j + k*4])
        calendar2.append(temp_calendar)

    """
    for i in range(len(calendar)):
        calendar[i] = calendar[i].split("   ")
    calendar[0] = calendar[0][0].split("  ")
    print(calendar)
    """

    calendar3 = []
    for i,_ in enumerate(calendar2[0]):
        calendar3.append([])
        for j in range(len(calendar2)):
            try:
                calendar3[i].append(calendar2[j][i])
            except:
                pass
    for i in enumerate(calendar3):
        calendar3[i] = " ".join(calendar3[i])
    calendar3 = "\n".join(calendar3)
    


if __name__ == '__main__':
    try:
        print("Type month")
        month = input()
        month = int(month)
        print("Type year")
        year = input()
        year = int(year)
        print("\n\nThe calendar is: ")
        print (calendar(month, year))
    except ValueError as err:
        print(err)
